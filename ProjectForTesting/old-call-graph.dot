digraph "old-call-graph" {
    "<test.objectTest: void setUp()>"
    "<sootTest.object: void <clinit>()>"
    "<test.objectTest: void setUp()>"->"<sootTest.object: void <clinit>()>";
    "<java.lang.Object: void <clinit>()>"
    "<test.objectTest: void setUp()>"->"<java.lang.Object: void <clinit>()>";
    "<test.objectTest: void testField()>"
    "<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>"
    "<test.objectTest: void testField()>"->"<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>";
    "<test.sootexampleTest: void testStaticEqualMethod()>"
    "<sootTest.sootexample: int equalStaticMethod()>"
    "<test.sootexampleTest: void testStaticEqualMethod()>"->"<sootTest.sootexample: int equalStaticMethod()>";
    "<test.sootexampleTest: void testFinalStaticDifferentMethod()>"
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"
    "<test.sootexampleTest: void testFinalStaticDifferentMethod()>"->"<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>";
    "<test.sootexampleTest: void testStaticDifferentMethod()>"
    "<sootTest.sootexample: int differentStaticMethod()>"
    "<test.sootexampleTest: void testStaticDifferentMethod()>"->"<sootTest.sootexample: int differentStaticMethod()>";
    "<test.sootexampleTest: void testFinalStaticEqualMethod()>"
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"
    "<test.sootexampleTest: void testFinalStaticEqualMethod()>"->"<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>";
    "<test.sootexampleTest: void equalTest()>"
    "<org.junit.Assert: void assertTrue(boolean)>"
    "<test.sootexampleTest: void equalTest()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<sootTest.object: void <clinit>()>"->"<sootTest.object: void <clinit>()>";
    "<sootTest.object: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Object: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Object: void registerNatives()>"
    "<java.lang.Object: void <clinit>()>"->"<java.lang.Object: void registerNatives()>";
    "<java.util.ArrayList: void <clinit>()>"
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<java.lang.String: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.object: void <init>()>"
    "<test.objectTest: void setUp()>"->"<sootTest.object: void <init>()>";
    "<sootTest.object: java.lang.String getFinalField()>"
    "<test.objectTest: void testField()>"->"<sootTest.object: java.lang.String getFinalField()>";
    "<test.sootexampleTest: void setUp()>"
    "<sootTest.sootexample: void <init>()>"
    "<test.sootexampleTest: void setUp()>"->"<sootTest.sootexample: void <init>()>";
    "<test.sootexampleTest: void test1()>"
    "<sootTest.sootexample: void d()>"
    "<test.sootexampleTest: void test1()>"->"<sootTest.sootexample: void d()>";
    "<test.sootexampleTest: void test2()>"
    "<sootTest.sootexample: void c()>"
    "<test.sootexampleTest: void test2()>"->"<sootTest.sootexample: void c()>";
    "<test.sootexampleTest: void test3()>"
    "<test.sootexampleTest: void test3()>"->"<sootTest.sootexample: void <init>()>";
    "<test.sootexampleTest: void test2_2()>"
    "<test.sootexampleTest: void test2_2()>"->"<sootTest.sootexample: void c()>";
    "<test.sootexampleTest: void testInit()>"
    "<test.sootexampleTest: void testInit()>"->"<sootTest.sootexample: void <init>()>";
    "<test.sootexampleTest: void test4()>"
    "<test.sootexampleTest: void test4()>"->"<sootTest.sootexample: void <init>()>";
    "<test.sootexampleTest: void testDifferenceInAPrivateMethod()>"
    "<sootTest.sootexample: void differenceInPrivateMethod()>"
    "<test.sootexampleTest: void testDifferenceInAPrivateMethod()>"->"<sootTest.sootexample: void differenceInPrivateMethod()>";
    "<test.sootexampleTest: void testDifferenceInSignature()>"
    "<sootTest.sootexample: void differenceInSignature()>"
    "<test.sootexampleTest: void testDifferenceInSignature()>"->"<sootTest.sootexample: void differenceInSignature()>";
    "<test.sootexampleTest: void testDifferentNameOfAVariable()>"
    "<sootTest.sootexample: int methodWithDifferenceInVariableName()>"
    "<test.sootexampleTest: void testDifferentNameOfAVariable()>"->"<sootTest.sootexample: int methodWithDifferenceInVariableName()>";
    "<test.sootexampleTest: void testFinalEqualMethod()>"
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"
    "<test.sootexampleTest: void testFinalEqualMethod()>"->"<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<test.sootexampleTest: void testFinalDifferentMethod()>"
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"
    "<test.sootexampleTest: void testFinalDifferentMethod()>"->"<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<test.sootexampleTest: void equalTest()>"->"<sootTest.sootexample: void c()>";
    "<java.util.ArrayList: void <init>()>"
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String$CaseInsensitiveComparator: void <init>(java.lang.String$1)>"
    "<java.lang.String: void <clinit>()>"->"<java.lang.String$CaseInsensitiveComparator: void <init>(java.lang.String$1)>";
    "<java.lang.Throwable: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<java.lang.Object: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Object: java.lang.String toString()>";
    "<java.util.AbstractCollection: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.AbstractCollection: java.lang.String toString()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<java.lang.Boolean: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Boolean: java.lang.String toString()>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Class: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Class: java.lang.String toString()>";
    "<java.lang.String: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.String: java.lang.String toString()>";
    "<java.io.ObjectStreamField: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.ObjectStreamField: java.lang.String toString()>";
    "<java.lang.Integer: void <clinit>()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Integer: java.lang.String toHexString(int)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Arrays: void <clinit>()>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: char[] copyOfRange(char[],int,int)>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.util.Arrays: char[] copyOfRange(char[],int,int)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>"
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void registerNatives()>"
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void registerNatives()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>";
    "<java.lang.Math: int max(int,int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Math: int max(int,int)>";
    "<java.lang.Integer: int numberOfLeadingZeros(int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: int numberOfLeadingZeros(int)>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Math: void <clinit>()>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Object: void <init>()>"
    "<sootTest.object: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Object: void finalize()>"
    "<java.lang.Object: void <init>()>"->"<java.lang.Object: void finalize()>";
    "<sootTest.sootexample: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sootTest.sootexample: void b()>"
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void b()>";
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void b()>";
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void c()>";
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void d()>";
    "<sootTest.sootexample: void privateMethodWithChange()>"
    "<sootTest.sootexample: void differenceInPrivateMethod()>"->"<sootTest.sootexample: void privateMethodWithChange()>";
    "<sootTest.sootexample: void methodWithDifferentSignature()>"
    "<sootTest.sootexample: void differenceInSignature()>"->"<sootTest.sootexample: void methodWithDifferentSignature()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.lang.AssertionError: void <init>()>"
    "<java.lang.Error: void <init>()>"
    "<java.lang.AssertionError: void <init>()>"->"<java.lang.Error: void <init>()>";
    "<java.lang.AssertionError: void <init>(java.lang.String)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.AssertionError: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>";
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"
    "<java.lang.Boolean: boolean booleanValue()>"
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"->"<java.lang.Boolean: boolean booleanValue()>";
    "<java.lang.Class: java.lang.String getName()>"
    "<java.lang.Class: java.lang.String getName0()>"
    "<java.lang.Class: java.lang.String getName()>"->"<java.lang.Class: java.lang.String getName0()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Throwable: java.lang.String getLocalizedMessage()>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.StringBuilder: void <init>()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Object: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: int hashCode()>";
    "<java.util.AbstractList: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.AbstractList: int hashCode()>";
    "<java.lang.Boolean: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Boolean: int hashCode()>";
    "<java.lang.String: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.String: int hashCode()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Boolean: void <clinit>()>"
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: int hashCode(boolean)>"
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Boolean: int hashCode(boolean)>";
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <init>(char[],boolean)>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: boolean isInterface()>"
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: boolean isInterface()>";
    "<java.lang.Class: boolean isPrimitive()>"
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: boolean isPrimitive()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<sootTest.sootexample: void a()>"
    "<sootTest.sootexample: void b()>"->"<sootTest.sootexample: void a()>";
    "<java.lang.Throwable: void <init>()>"
    "<java.lang.Error: void <init>()>"->"<java.lang.Throwable: void <init>()>";
    "<java.lang.Throwable: void <clinit>()>"
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Collections: void <clinit>()>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Error: void <init>(java.lang.String)>"
    "<java.lang.AssertionError: void <init>(java.lang.String)>"->"<java.lang.Error: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<org.junit.ComparisonFailure: java.lang.String getMessage()>"
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<org.junit.ComparisonFailure: java.lang.String getMessage()>";
    "<java.lang.Boolean: void <init>(boolean)>"
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <init>(boolean)>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <init>(boolean)>";
    "<java.lang.String: void <init>(char[],boolean)>"->"<java.lang.Object: void <init>()>";
    "<sootTest.sootexample: void a()>"->"<sootTest.sootexample: void c()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<java.util.ArrayList: void <init>(int)>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.ArrayList: void <init>(int)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>"
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"
    "<java.lang.Error: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <init>(java.lang.String)>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <init>(boolean)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>"
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.System: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>";
    "<sun.reflect.Reflection: java.lang.Class getCallerClass()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<sun.reflect.Reflection: java.lang.Class getCallerClass()>";
    "<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.ClassLoader: void <clinit>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<sun.reflect.Reflection: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<sun.reflect.Reflection: void <clinit>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader0()>";
    "<java.lang.String: java.lang.String substring(int)>"
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringIndexOutOfBoundsException: void <init>(int)>"
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.String: void <init>(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.util.Arrays: char[] copyOfRange(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.String: void <init>(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: char charAt(int)>"
    "<java.lang.String: char charAt(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
}
