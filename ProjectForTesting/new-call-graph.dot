digraph "new-call-graph" {
    "<testClass9: void testMethodForTestClass9()>"
    "<test.setUpChannge: void <init>()>"
    "<testClass9: void testMethodForTestClass9()>"->"<test.setUpChannge: void <init>()>";
    "<test.setUpChannge: void toAddForChangeInSetUpEqual()>"
    "<testClass9: void testMethodForTestClass9()>"->"<test.setUpChannge: void toAddForChangeInSetUpEqual()>";
    "<test.setUpChannge: void setUp()>"
    "<testClass9: void testMethodForTestClass9()>"->"<test.setUpChannge: void setUp()>";
    "<test.setUpChannge: void toAddForChangeInSetUpDifferent()>"
    "<testClass9: void testMethodForTestClass9()>"->"<test.setUpChannge: void toAddForChangeInSetUpDifferent()>";
    "<junit.framework.TestCase: void fail(java.lang.String)>"
    "<test.setUpChannge: void toAddForChangeInSetUpEqual()>"->"<junit.framework.TestCase: void fail(java.lang.String)>";
    "<java.util.ArrayList: void <clinit>()>"
    "<test.setUpChannge: void setUp()>"->"<java.util.ArrayList: void <clinit>()>";
    "<java.lang.Object: void <clinit>()>"
    "<test.setUpChannge: void setUp()>"->"<java.lang.Object: void <clinit>()>";
    "<org.junit.Assert: void assertTrue(boolean)>"
    "<test.setUpChannge: void toAddForChangeInSetUpDifferent()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<junit.framework.Assert: void fail(java.lang.String)>"
    "<junit.framework.TestCase: void fail(java.lang.String)>"->"<junit.framework.Assert: void fail(java.lang.String)>";
    "<java.lang.Object: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Object: void registerNatives()>"
    "<java.lang.Object: void <clinit>()>"->"<java.lang.Object: void registerNatives()>";
    "<testClass3: void testMethodForTestClass3()>"
    "<test.HierarchyTest: void <init>()>"
    "<testClass3: void testMethodForTestClass3()>"->"<test.HierarchyTest: void <init>()>";
    "<test.HierarchyTest: void testHierarchy()>"
    "<testClass3: void testMethodForTestClass3()>"->"<test.HierarchyTest: void testHierarchy()>";
    "<testClass8: void testMethodForTestClass8()>"
    "<test.ExtendedAbstractClass2: void <init>()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void <init>()>";
    "<test.ExtendedAbstractClass2: void abstractMethod()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void abstractMethod()>";
    "<test.ExtendedAbstractClass2: void concreteMethodNotOverrided()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void concreteMethodNotOverrided()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverrided()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void concreteMethodOverrided()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>";
    "<test.ExtendedAbstractClass2: void abstractMethodThatTestDifferentMethod()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void abstractMethodThatTestDifferentMethod()>";
    "<test.ExtendedAbstractClass2: void concreteMethodThatTestDifferentMethod()>"
    "<testClass8: void testMethodForTestClass8()>"->"<test.ExtendedAbstractClass2: void concreteMethodThatTestDifferentMethod()>";
    "<org.junit.Assert: void fail()>"
    "<test.ExtendedAbstractClass2: void abstractMethod()>"->"<org.junit.Assert: void fail()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverrided()>"->"<java.util.ArrayList: void <clinit>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverrided()>"->"<java.lang.Object: void <clinit>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.util.ArrayList: void <clinit>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.lang.Object: void <clinit>()>";
    "<test.ExtendedAbstractClass2: void abstractMethodThatTestDifferentMethod()>"->"<org.junit.Assert: void fail()>";
    "<testClass5: void testMethodForTestClass5()>"
    "<test.sootexampleTest: void <init>()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void <init>()>";
    "<test.sootexampleTest: void testFinalStaticDifferentMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testFinalStaticDifferentMethod()>";
    "<test.sootexampleTest: void setUp()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void setUp()>";
    "<test.sootexampleTest: void realFailureTest()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void realFailureTest()>";
    "<test.sootexampleTest: void test3()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void test3()>";
    "<test.sootexampleTest: void testFinalDifferentMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testFinalDifferentMethod()>";
    "<test.sootexampleTest: void testFinalEqualMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testFinalEqualMethod()>";
    "<test.sootexampleTest: void test2()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void test2()>";
    "<test.sootexampleTest: void testNewMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testNewMethod()>";
    "<test.sootexampleTest: void testStaticEqualMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testStaticEqualMethod()>";
    "<test.sootexampleTest: void testStaticDifferentMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testStaticDifferentMethod()>";
    "<test.sootexampleTest: void testFinalStaticEqualMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testFinalStaticEqualMethod()>";
    "<test.sootexampleTest: void testDifferenceInAPrivateMethod()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testDifferenceInAPrivateMethod()>";
    "<test.sootexampleTest: void testDifferentNameOfAVariable()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testDifferentNameOfAVariable()>";
    "<test.sootexampleTest: void equalTest()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void equalTest()>";
    "<test.sootexampleTest: void realPassTest()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void realPassTest()>";
    "<test.sootexampleTest: void test1()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void test1()>";
    "<test.sootexampleTest: void test2_2()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void test2_2()>";
    "<test.sootexampleTest: void testInit()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testInit()>";
    "<test.sootexampleTest: void testDifferenceInSignature()>"
    "<testClass5: void testMethodForTestClass5()>"->"<test.sootexampleTest: void testDifferenceInSignature()>";
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"
    "<test.sootexampleTest: void testFinalStaticDifferentMethod()>"->"<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>";
    "<test.sootexampleTest: void realFailureTest()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<sootTest.sootexample: int equalStaticMethod()>"
    "<test.sootexampleTest: void testStaticEqualMethod()>"->"<sootTest.sootexample: int equalStaticMethod()>";
    "<sootTest.sootexample: int differentStaticMethod()>"
    "<test.sootexampleTest: void testStaticDifferentMethod()>"->"<sootTest.sootexample: int differentStaticMethod()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"
    "<test.sootexampleTest: void testFinalStaticEqualMethod()>"->"<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>";
    "<test.sootexampleTest: void equalTest()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<test.sootexampleTest: void realPassTest()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<testClass2: void testMethodForTestClass2()>"
    "<test.objectTest: void <init>()>"
    "<testClass2: void testMethodForTestClass2()>"->"<test.objectTest: void <init>()>";
    "<test.objectTest: void setUp()>"
    "<testClass2: void testMethodForTestClass2()>"->"<test.objectTest: void setUp()>";
    "<test.objectTest: void testField()>"
    "<testClass2: void testMethodForTestClass2()>"->"<test.objectTest: void testField()>";
    "<sootTest.object: void <clinit>()>"
    "<test.objectTest: void setUp()>"->"<sootTest.object: void <clinit>()>";
    "<test.objectTest: void setUp()>"->"<java.lang.Object: void <clinit>()>";
    "<test.objectTest: void testField()>"->"<sootTest.object: void <clinit>()>";
    "<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>"
    "<test.objectTest: void testField()>"->"<org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>";
    "<test.objectTest: void testField()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.object: void <clinit>()>"->"<sootTest.object: void <clinit>()>";
    "<sootTest.object: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"
    "<java.lang.String: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<testClass1: void testMethodForTestClass1()>"
    "<test.ExtendedAbstractClass: void <init>()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void <init>()>";
    "<test.ExtendedAbstractClass: void concreteMethodThatTestDifferentMethod()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void concreteMethodThatTestDifferentMethod()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverrided()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void concreteMethodOverrided()>";
    "<test.ExtendedAbstractClass: void concreteMethodNotOverrided()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void concreteMethodNotOverrided()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>";
    "<test.ExtendedAbstractClass: void abstractMethodThatTestDifferentMethod()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void abstractMethodThatTestDifferentMethod()>";
    "<test.ExtendedAbstractClass: void abstractMethod()>"
    "<testClass1: void testMethodForTestClass1()>"->"<test.ExtendedAbstractClass: void abstractMethod()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverrided()>"->"<org.junit.Assert: void fail()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.util.ArrayList: void <clinit>()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.lang.Object: void <clinit>()>";
    "<test.ExtendedAbstractClass: void abstractMethodThatTestDifferentMethod()>"->"<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>";
    "<test.ExtendedAbstractClass: void abstractMethod()>"->"<org.junit.Assert: void assertTrue(boolean)>";
    "<java.lang.Object: void <init>()>"
    "<test.setUpChannge: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Object: void finalize()>"
    "<java.lang.Object: void <init>()>"->"<java.lang.Object: void finalize()>";
    "<java.util.ArrayList: void <init>()>"
    "<test.setUpChannge: void setUp()>"->"<java.util.ArrayList: void <init>()>";
    "<junit.framework.AssertionFailedError: void <init>()>"
    "<junit.framework.Assert: void fail(java.lang.String)>"->"<junit.framework.AssertionFailedError: void <init>()>";
    "<junit.framework.AssertionFailedError: void <init>(java.lang.String)>"
    "<junit.framework.Assert: void fail(java.lang.String)>"->"<junit.framework.AssertionFailedError: void <init>(java.lang.String)>";
    "<junit.framework.AssertionFailedError: java.lang.String defaultString(java.lang.String)>"
    "<junit.framework.AssertionFailedError: void <init>(java.lang.String)>"->"<junit.framework.AssertionFailedError: java.lang.String defaultString(java.lang.String)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<test.HierarchyTest: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sootTest.FirstClass: void <init>()>"
    "<test.HierarchyTest: void testHierarchy()>"->"<sootTest.FirstClass: void <init>()>";
    "<sootTest.FirstClass: int foo()>"
    "<test.HierarchyTest: void testHierarchy()>"->"<sootTest.FirstClass: int foo()>";
    "<sootTest.ThirdClass: int foo()>"
    "<test.HierarchyTest: void testHierarchy()>"->"<sootTest.ThirdClass: int foo()>";
    "<test.AbstractTestClass: void <init>()>"
    "<test.ExtendedAbstractClass2: void <init>()>"->"<test.AbstractTestClass: void <init>()>";
    "<sootTest.sootexample: void <init>()>"
    "<test.ExtendedAbstractClass2: void concreteMethodNotOverrided()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass: void concreteMethodNotOverrided()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverrided()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverrided()>"->"<java.util.ArrayList: void <init>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.util.ArrayList: void <init>()>";
    "<test.ExtendedAbstractClass2: void concreteMethodThatTestDifferentMethod()>"->"<sootTest.sootexample: void <init>()>";
    "<sootTest.sootexample: void differenceInPrivateMethod()>"
    "<test.ExtendedAbstractClass2: void concreteMethodThatTestDifferentMethod()>"->"<sootTest.sootexample: void differenceInPrivateMethod()>";
    "<test.ExtendedAbstractClass: void concreteMethodThatTestDifferentMethod()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass: void concreteMethodThatTestDifferentMethod()>"->"<sootTest.sootexample: void differenceInPrivateMethod()>";
    "<test.sootexampleTest: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<test.sootexampleTest: void setUp()>"->"<sootTest.sootexample: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"
    "<test.sootexampleTest: void realFailureTest()>"->"<sootTest.sootexample: java.util.ArrayList realMethodToTest()>";
    "<java.util.ArrayList: boolean contains(java.lang.Object)>"
    "<test.sootexampleTest: void realFailureTest()>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.lang.Object: void <clinit>()>";
    "<test.sootexampleTest: void test3()>"->"<sootTest.sootexample: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"
    "<test.sootexampleTest: void testFinalDifferentMethod()>"->"<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"
    "<test.sootexampleTest: void testFinalEqualMethod()>"->"<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.sootexample: void c()>"
    "<test.sootexampleTest: void test2()>"->"<sootTest.sootexample: void c()>";
    "<sootTest.sootexample: void newMethod()>"
    "<test.sootexampleTest: void testNewMethod()>"->"<sootTest.sootexample: void newMethod()>";
    "<sootTest.sootexample: void newMethod()>"->"<java.util.ArrayList: void <clinit>()>";
    "<sootTest.sootexample: void newMethod()>"->"<java.lang.Object: void <clinit>()>";
    "<test.sootexampleTest: void testDifferenceInAPrivateMethod()>"->"<sootTest.sootexample: void differenceInPrivateMethod()>";
    "<sootTest.sootexample: int methodWithDifferenceInVariableName()>"
    "<test.sootexampleTest: void testDifferentNameOfAVariable()>"->"<sootTest.sootexample: int methodWithDifferenceInVariableName()>";
    "<test.sootexampleTest: void equalTest()>"->"<sootTest.sootexample: void c()>";
    "<test.sootexampleTest: void realPassTest()>"->"<sootTest.sootexample: java.util.ArrayList realMethodToTest()>";
    "<test.sootexampleTest: void realPassTest()>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<sootTest.sootexample: void d()>"
    "<test.sootexampleTest: void test1()>"->"<sootTest.sootexample: void d()>";
    "<test.sootexampleTest: void test2_2()>"->"<sootTest.sootexample: void c()>";
    "<test.sootexampleTest: void testInit()>"->"<sootTest.sootexample: void <init>()>";
    "<sootTest.sootexample: void differenceInSignature()>"
    "<test.sootexampleTest: void testDifferenceInSignature()>"->"<sootTest.sootexample: void differenceInSignature()>";
    "<sootTest.sootexample: java.util.ArrayList differentStaticFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "<sootTest.sootexample: java.util.ArrayList equalStaticFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<test.objectTest: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sootTest.object: void <init>()>"
    "<test.objectTest: void setUp()>"->"<sootTest.object: void <init>()>";
    "<test.objectTest: void testField()>"->"<sootTest.object: void <init>()>";
    "<sootTest.object: java.lang.String getFinalField()>"
    "<test.objectTest: void testField()>"->"<sootTest.object: java.lang.String getFinalField()>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"
    "<java.lang.Float: void <clinit>()>"
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: int floatToIntBits(float)>"
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Float: int floatToIntBits(float)>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Float: int floatToIntBits(float)>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"
    "<java.lang.Double: void <clinit>()>"
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: long doubleToLongBits(double)>"
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Double: long doubleToLongBits(double)>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Double: long doubleToLongBits(double)>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>"
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: int floatToIntBits(float)>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: int floatToRawIntBits(float)>"
    "<java.lang.Float: int floatToIntBits(float)>"->"<java.lang.Float: int floatToRawIntBits(float)>";
    "<java.lang.Float: int floatToIntBits(float)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: long doubleToLongBits(double)>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: long doubleToRawLongBits(double)>"
    "<java.lang.Double: long doubleToLongBits(double)>"->"<java.lang.Double: long doubleToRawLongBits(double)>";
    "<java.lang.Double: long doubleToLongBits(double)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void registerNatives()>"
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void registerNatives()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String$CaseInsensitiveComparator: void <init>(java.lang.String$1)>"
    "<java.lang.String: void <clinit>()>"->"<java.lang.String$CaseInsensitiveComparator: void <init>(java.lang.String$1)>";
    "<java.lang.Throwable: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Throwable: java.lang.String toString()>";
    "<java.lang.Object: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Object: java.lang.String toString()>";
    "<java.lang.Integer: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Integer: java.lang.String toString()>";
    "<java.util.Vector: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Vector: java.lang.String toString()>";
    "<java.net.Proxy: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.Proxy: java.lang.String toString()>";
    "<sun.util.calendar.Era: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.util.calendar.Era: java.lang.String toString()>";
    "<java.lang.Thread: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Thread: java.lang.String toString()>";
    "<java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.zone.ZoneOffsetTransitionRule: java.lang.String toString()>";
    "<org.junit.internal.ArrayComparisonFailure: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<org.junit.internal.ArrayComparisonFailure: java.lang.String toString()>";
    "<java.nio.ByteOrder: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.nio.ByteOrder: java.lang.String toString()>";
    "<java.lang.invoke.MemberName: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.MemberName: java.lang.String toString()>";
    "<java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.LambdaFormEditor$Transform: java.lang.String toString()>";
    "<java.lang.invoke.MethodTypeForm: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.MethodTypeForm: java.lang.String toString()>";
    "<java.time.format.Parsed: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.Parsed: java.lang.String toString()>";
    "<java.io.ByteArrayOutputStream: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.ByteArrayOutputStream: java.lang.String toString()>";
    "<java.time.LocalDateTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.LocalDateTime: java.lang.String toString()>";
    "<java.lang.reflect.Constructor: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.reflect.Constructor: java.lang.String toString()>";
    "<java.util.AbstractMap: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.AbstractMap: java.lang.String toString()>";
    "<java.util.OptionalLong: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.OptionalLong: java.lang.String toString()>";
    "<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>";
    "<java.time.zone.ZoneRules: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.zone.ZoneRules: java.lang.String toString()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "<java.security.PrivilegedActionException: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.PrivilegedActionException: java.lang.String toString()>";
    "<java.lang.Enum: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Enum: java.lang.String toString()>";
    "<java.io.ObjectOutputStream$DebugTraceInfoStack: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.ObjectOutputStream$DebugTraceInfoStack: java.lang.String toString()>";
    "<java.lang.invoke.LambdaForm$NamedFunction: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.LambdaForm$NamedFunction: java.lang.String toString()>";
    "<java.security.Provider$Service: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.Provider$Service: java.lang.String toString()>";
    "<java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String toString()>";
    "<sun.util.locale.Extension: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.util.locale.Extension: java.lang.String toString()>";
    "<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>";
    "<sun.util.calendar.CalendarDate: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.util.calendar.CalendarDate: java.lang.String toString()>";
    "<java.security.Permission: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.Permission: java.lang.String toString()>";
    "<java.lang.reflect.Method: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.reflect.Method: java.lang.String toString()>";
    "<java.time.format.DateTimeParseContext: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.DateTimeParseContext: java.lang.String toString()>";
    "<java.time.LocalDate: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.LocalDate: java.lang.String toString()>";
    "<java.util.OptionalDouble: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.OptionalDouble: java.lang.String toString()>";
    "<java.nio.charset.CodingErrorAction: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.nio.charset.CodingErrorAction: java.lang.String toString()>";
    "<java.lang.Boolean: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Boolean: java.lang.String toString()>";
    "<java.time.Period: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.Period: java.lang.String toString()>";
    "<java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.BoundMethodHandle$SpeciesData: java.lang.String toString()>";
    "<java.lang.Package: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Package: java.lang.String toString()>";
    "<java.lang.invoke.LambdaForm$Name: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.LambdaForm$Name: java.lang.String toString()>";
    "<java.time.format.DateTimePrintContext: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.DateTimePrintContext: java.lang.String toString()>";
    "<java.time.format.DateTimeFormatter: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.DateTimeFormatter: java.lang.String toString()>";
    "<java.util.StringJoiner: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.StringJoiner: java.lang.String toString()>";
    "<java.util.IntSummaryStatistics: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.IntSummaryStatistics: java.lang.String toString()>";
    "<java.lang.Class: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Class: java.lang.String toString()>";
    "<java.lang.Float: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Float: java.lang.String toString()>";
    "<java.lang.invoke.LambdaForm: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.LambdaForm: java.lang.String toString()>";
    "<java.util.concurrent.ConcurrentHashMap$Node: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.concurrent.ConcurrentHashMap$Node: java.lang.String toString()>";
    "<java.nio.file.attribute.FileTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.nio.file.attribute.FileTime: java.lang.String toString()>";
    "<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>";
    "<java.math.BigDecimal: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.math.BigDecimal: java.lang.String toString()>";
    "<java.lang.Character: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Character: java.lang.String toString()>";
    "<java.lang.invoke.MethodHandles$Lookup: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.MethodHandles$Lookup: java.lang.String toString()>";
    "<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>";
    "<java.util.HashMap$Node: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.HashMap$Node: java.lang.String toString()>";
    "<java.util.AbstractCollection: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.AbstractCollection: java.lang.String toString()>";
    "<java.lang.reflect.Parameter: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.reflect.Parameter: java.lang.String toString()>";
    "<java.util.jar.Attributes$Name: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.jar.Attributes$Name: java.lang.String toString()>";
    "<java.lang.String: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.String: java.lang.String toString()>";
    "<java.util.Hashtable: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Hashtable: java.lang.String toString()>";
    "<java.io.StringWriter: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.StringWriter: java.lang.String toString()>";
    "<java.util.Formatter: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Formatter: java.lang.String toString()>";
    "<java.time.LocalTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.LocalTime: java.lang.String toString()>";
    "<java.time.OffsetTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.OffsetTime: java.lang.String toString()>";
    "<jdk.internal.org.objectweb.asm.TypePath: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<jdk.internal.org.objectweb.asm.TypePath: java.lang.String toString()>";
    "<sun.reflect.'annotation'.AnnotationType: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.reflect.'annotation'.AnnotationType: java.lang.String toString()>";
    "<sun.util.locale.LocaleExtensions: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.util.locale.LocaleExtensions: java.lang.String toString()>";
    "<java.util.regex.Pattern: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.regex.Pattern: java.lang.String toString()>";
    "<java.text.ParsePosition: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.text.ParsePosition: java.lang.String toString()>";
    "<java.io.ObjectStreamClass: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.ObjectStreamClass: java.lang.String toString()>";
    "<java.lang.Character$Subset: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Character$Subset: java.lang.String toString()>";
    "<java.security.CodeSigner: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.CodeSigner: java.lang.String toString()>";
    "<java.util.LongSummaryStatistics: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.LongSummaryStatistics: java.lang.String toString()>";
    "<java.security.PermissionCollection: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.PermissionCollection: java.lang.String toString()>";
    "<sun.util.locale.BaseLocale: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.util.locale.BaseLocale: java.lang.String toString()>";
    "<java.lang.invoke.MethodType: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.MethodType: java.lang.String toString()>";
    "<java.security.Timestamp: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.Timestamp: java.lang.String toString()>";
    "<java.time.ZonedDateTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.ZonedDateTime: java.lang.String toString()>";
    "<java.lang.ThreadGroup: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.ThreadGroup: java.lang.String toString()>";
    "<java.time.temporal.ValueRange: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.temporal.ValueRange: java.lang.String toString()>";
    "<java.lang.Long: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Long: java.lang.String toString()>";
    "<java.time.Duration: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.Duration: java.lang.String toString()>";
    "<java.math.BigInteger: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.math.BigInteger: java.lang.String toString()>";
    "<java.time.ZoneOffset: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.ZoneOffset: java.lang.String toString()>";
    "<java.io.ObjectStreamField: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.ObjectStreamField: java.lang.String toString()>";
    "<java.math.MathContext: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.math.MathContext: java.lang.String toString()>";
    "<java.net.NetworkInterface: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.NetworkInterface: java.lang.String toString()>";
    "<java.util.WeakHashMap$Entry: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.WeakHashMap$Entry: java.lang.String toString()>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.Hashtable$Entry: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Hashtable$Entry: java.lang.String toString()>";
    "<java.lang.StackTraceElement: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.StackTraceElement: java.lang.String toString()>";
    "<java.lang.reflect.Field: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.reflect.Field: java.lang.String toString()>";
    "<java.net.InetAddress: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.InetAddress: java.lang.String toString()>";
    "<java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>";
    "<java.security.ProtectionDomain: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.ProtectionDomain: java.lang.String toString()>";
    "<sun.net.www.MessageHeader: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.net.www.MessageHeader: java.lang.String toString()>";
    "<java.util.Date: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Date: java.lang.String toString()>";
    "<java.time.chrono.AbstractChronology: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.chrono.AbstractChronology: java.lang.String toString()>";
    "<java.util.Locale: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Locale: java.lang.String toString()>";
    "<java.lang.Short: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Short: java.lang.String toString()>";
    "<java.util.zip.ZipEntry: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.zip.ZipEntry: java.lang.String toString()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>";
    "<junit.framework.TestFailure: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<junit.framework.TestFailure: java.lang.String toString()>";
    "<jdk.internal.org.objectweb.asm.Type: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<jdk.internal.org.objectweb.asm.Type: java.lang.String toString()>";
    "<java.time.Instant: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.Instant: java.lang.String toString()>";
    "<org.hamcrest.Description$NullDescription: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<org.hamcrest.Description$NullDescription: java.lang.String toString()>";
    "<java.math.MutableBigInteger: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.math.MutableBigInteger: java.lang.String toString()>";
    "<sun.reflect.'annotation'.TypeAnnotation: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.reflect.'annotation'.TypeAnnotation: java.lang.String toString()>";
    "<java.util.OptionalInt: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.OptionalInt: java.lang.String toString()>";
    "<java.lang.invoke.MethodHandle: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.MethodHandle: java.lang.String toString()>";
    "<javax.security.auth.Subject: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<javax.security.auth.Subject: java.lang.String toString()>";
    "<org.hamcrest.StringDescription: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<org.hamcrest.StringDescription: java.lang.String toString()>";
    "<jdk.internal.org.objectweb.asm.Handle: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<jdk.internal.org.objectweb.asm.Handle: java.lang.String toString()>";
    "<java.util.DoubleSummaryStatistics: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.DoubleSummaryStatistics: java.lang.String toString()>";
    "<java.util.regex.Matcher: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.regex.Matcher: java.lang.String toString()>";
    "<java.text.FieldPosition: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.text.FieldPosition: java.lang.String toString()>";
    "<java.net.InterfaceAddress: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.InterfaceAddress: java.lang.String toString()>";
    "<sun.reflect.'annotation'.TypeAnnotation$TypeAnnotationTargetInfo: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<sun.reflect.'annotation'.TypeAnnotation$TypeAnnotationTargetInfo: java.lang.String toString()>";
    "<java.lang.Double: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Double: java.lang.String toString()>";
    "<java.io.File: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.io.File: java.lang.String toString()>";
    "<java.time.format.DecimalStyle: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.DecimalStyle: java.lang.String toString()>";
    "<java.security.CodeSource: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.security.CodeSource: java.lang.String toString()>";
    "<java.net.URL: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.URL: java.lang.String toString()>";
    "<java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.lang.String toString()>";
    "<java.net.URI: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.net.URI: java.lang.String toString()>";
    "<java.lang.Byte: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.Byte: java.lang.String toString()>";
    "<java.time.OffsetDateTime: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.OffsetDateTime: java.lang.String toString()>";
    "<java.util.Optional: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.util.Optional: java.lang.String toString()>";
    "<java.time.temporal.ChronoField: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.time.temporal.ChronoField: java.lang.String toString()>";
    "<java.nio.charset.CoderResult: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.nio.charset.CoderResult: java.lang.String toString()>";
    "<java.lang.invoke.Invokers: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.Invokers: java.lang.String toString()>";
    "<java.lang.invoke.SerializedLambda: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<java.lang.invoke.SerializedLambda: java.lang.String toString()>";
    "<jdk.internal.org.objectweb.asm.Label: java.lang.String toString()>"
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"->"<jdk.internal.org.objectweb.asm.Label: java.lang.String toString()>";
    "<java.lang.Integer: void <clinit>()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Integer: java.lang.String toHexString(int)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"
    "<java.lang.Integer: java.lang.String toString()>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<java.lang.Integer: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Arrays: void <clinit>()>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: char[] copyOfRange(char[],int,int)>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.util.Arrays: char[] copyOfRange(char[],int,int)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: java.lang.String toString()>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: java.lang.String toString(float)>"
    "<java.lang.Float: java.lang.String toString()>"->"<java.lang.Float: java.lang.String toString(float)>";
    "<java.lang.Float: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char[])>"
    "<java.lang.Character: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(char[])>";
    "<java.lang.Character: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"
    "<java.lang.Long: java.lang.String toString()>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"
    "<java.lang.Long: java.lang.String toString()>"->"<java.lang.Long: java.lang.String toString(long)>";
    "<java.lang.Long: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: java.lang.String toString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Short: java.lang.String toString()>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<java.lang.Short: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: java.lang.String toString()>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: java.lang.String toString(double)>"
    "<java.lang.Double: java.lang.String toString()>"->"<java.lang.Double: java.lang.String toString(double)>";
    "<java.lang.Double: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Byte: java.lang.String toString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Byte: java.lang.String toString()>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "<java.lang.Byte: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>";
    "<java.lang.Integer: java.lang.String toHexString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: void getChars(int,int,char[])>";
    "<java.lang.Integer: int stringSize(int)>"
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: int stringSize(int)>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: int stringSize(int)>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.Object: void <clinit>()>";
    "<sun.misc.FloatingDecimal: void <clinit>()>"
    "<java.lang.Float: java.lang.String toString(float)>"->"<sun.misc.FloatingDecimal: void <clinit>()>";
    "<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString(float)>"
    "<java.lang.Float: java.lang.String toString(float)>"->"<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString(float)>";
    "<java.lang.Float: java.lang.String toString(float)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char[])>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: void getChars(long,int,char[])>";
    "<java.lang.Long: int stringSize(long)>"
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: int stringSize(long)>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: int stringSize(long)>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: java.lang.String toString(double)>"->"<sun.misc.FloatingDecimal: void <clinit>()>";
    "<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString(double)>"
    "<java.lang.Double: java.lang.String toString(double)>"->"<sun.misc.FloatingDecimal: java.lang.String toJavaFormatString(double)>";
    "<java.lang.Double: java.lang.String toString(double)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>";
    "<java.lang.Math: int max(int,int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Math: int max(int,int)>";
    "<java.lang.Integer: int numberOfLeadingZeros(int)>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: int numberOfLeadingZeros(int)>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Math: void <clinit>()>"
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: void getChars(int,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: int stringSize(int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int stringSize(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Long: void getChars(long,int,char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int formatUnsignedInt(int,int,char[],int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<test.ExtendedAbstractClass: void <init>()>"->"<test.AbstractTestClass: void <init>()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<sootTest.sootexample: void <init>()>";
    "<test.ExtendedAbstractClass: void concreteMethodOverridedOnlyByExtendAbstractClass2()>"->"<java.util.ArrayList: void <init>()>";
    "<java.lang.AssertionError: void <init>()>"
    "<junit.framework.AssertionFailedError: void <init>()>"->"<java.lang.AssertionError: void <init>()>";
    "<junit.framework.AssertionFailedError: void <init>(java.lang.String)>"->"<java.lang.AssertionError: void <init>(java.lang.Object)>";
    "<java.lang.Error: void <init>()>"
    "<java.lang.AssertionError: void <init>()>"->"<java.lang.Error: void <init>()>";
    "<java.lang.AssertionError: void <init>(java.lang.String)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.AssertionError: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "<java.lang.AssertionError: void <init>(java.lang.Object)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>";
    "<sootTest.FirstClass: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<test.AbstractTestClass: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sootTest.sootexample: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sootTest.sootexample: void privateMethodWithChange()>"
    "<sootTest.sootexample: void differenceInPrivateMethod()>"->"<sootTest.sootexample: void privateMethodWithChange()>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList realMethodToTest()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList differentFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: java.util.ArrayList equalFinalMethod()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void d()>";
    "<sootTest.sootexample: void b()>"
    "<sootTest.sootexample: void c()>"->"<sootTest.sootexample: void b()>";
    "<sootTest.sootexample: void newMethod()>"->"<java.util.ArrayList: void <init>()>";
    "<sootTest.sootexample: void methodWithDifferentSignature()>"
    "<sootTest.sootexample: void differenceInSignature()>"->"<sootTest.sootexample: void methodWithDifferentSignature()>";
    "<sootTest.object: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Character: boolean equals(java.lang.Object)>"
    "<java.lang.Character: char charValue()>"
    "<java.lang.Character: boolean equals(java.lang.Object)>"->"<java.lang.Character: char charValue()>";
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"
    "<java.lang.Boolean: boolean booleanValue()>"
    "<java.lang.Boolean: boolean equals(java.lang.Object)>"->"<java.lang.Boolean: boolean booleanValue()>";
    "<java.lang.Short: boolean equals(java.lang.Object)>"
    "<java.lang.Short: short shortValue()>"
    "<java.lang.Short: boolean equals(java.lang.Object)>"->"<java.lang.Short: short shortValue()>";
    "<java.lang.Byte: boolean equals(java.lang.Object)>"
    "<java.lang.Byte: byte byteValue()>"
    "<java.lang.Byte: boolean equals(java.lang.Object)>"->"<java.lang.Byte: byte byteValue()>";
    "<java.lang.Long: boolean equals(java.lang.Object)>"
    "<java.lang.Long: long longValue()>"
    "<java.lang.Long: boolean equals(java.lang.Object)>"->"<java.lang.Long: long longValue()>";
    "<java.lang.Integer: boolean equals(java.lang.Object)>"
    "<java.lang.Integer: int intValue()>"
    "<java.lang.Integer: boolean equals(java.lang.Object)>"->"<java.lang.Integer: int intValue()>";
    "<java.lang.Class: java.lang.String getName()>"
    "<java.lang.Class: java.lang.String getName0()>"
    "<java.lang.Class: java.lang.String getName()>"->"<java.lang.Class: java.lang.String getName0()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Throwable: java.lang.String getLocalizedMessage()>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.StringBuilder: void <init>()>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Object: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Object: int hashCode()>";
    "<java.lang.Integer: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Integer: int hashCode()>";
    "<java.util.Vector: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Vector: int hashCode()>";
    "<java.net.Proxy: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.Proxy: int hashCode()>";
    "<sun.util.calendar.Era: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<sun.util.calendar.Era: int hashCode()>";
    "<java.time.zone.ZoneOffsetTransitionRule: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.zone.ZoneOffsetTransitionRule: int hashCode()>";
    "<java.lang.invoke.MemberName: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.MemberName: int hashCode()>";
    "<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.LambdaFormEditor$Transform: int hashCode()>";
    "<java.time.LocalDateTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.LocalDateTime: int hashCode()>";
    "<java.lang.reflect.Constructor: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.reflect.Constructor: int hashCode()>";
    "<java.util.AbstractMap: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.AbstractMap: int hashCode()>";
    "<java.util.OptionalLong: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.OptionalLong: int hashCode()>";
    "<java.text.AttributedCharacterIterator$Attribute: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.text.AttributedCharacterIterator$Attribute: int hashCode()>";
    "<java.time.zone.ZoneRules: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.zone.ZoneRules: int hashCode()>";
    "<java.lang.Enum: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Enum: int hashCode()>";
    "<java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.LambdaForm$NamedFunction: int hashCode()>";
    "<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.concurrent.ConcurrentHashMap$KeySetView: int hashCode()>";
    "<sun.util.calendar.CalendarDate: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<sun.util.calendar.CalendarDate: int hashCode()>";
    "<java.net.SocketPermission: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.SocketPermission: int hashCode()>";
    "<java.lang.reflect.Method: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.reflect.Method: int hashCode()>";
    "<java.util.jar.Attributes: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.jar.Attributes: int hashCode()>";
    "<java.time.LocalDate: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.LocalDate: int hashCode()>";
    "<java.util.OptionalDouble: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.OptionalDouble: int hashCode()>";
    "<java.security.AllPermission: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.AllPermission: int hashCode()>";
    "<java.text.MessageFormat: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.text.MessageFormat: int hashCode()>";
    "<java.security.BasicPermission: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.BasicPermission: int hashCode()>";
    "<java.lang.Boolean: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Boolean: int hashCode()>";
    "<java.time.Period: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.Period: int hashCode()>";
    "<java.lang.Package: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Package: int hashCode()>";
    "<java.lang.Thread$WeakClassKey: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Thread$WeakClassKey: int hashCode()>";
    "<java.lang.invoke.LambdaForm$Name: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.LambdaForm$Name: int hashCode()>";
    "<java.security.AccessControlContext: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.AccessControlContext: int hashCode()>";
    "<java.lang.Float: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Float: int hashCode()>";
    "<java.lang.invoke.LambdaForm: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.LambdaForm: int hashCode()>";
    "<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>";
    "<java.nio.file.attribute.FileTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.nio.file.attribute.FileTime: int hashCode()>";
    "<java.math.BigDecimal: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.math.BigDecimal: int hashCode()>";
    "<java.lang.Character: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Character: int hashCode()>";
    "<java.time.zone.ZoneOffsetTransition: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.zone.ZoneOffsetTransition: int hashCode()>";
    "<java.util.HashMap$Node: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.HashMap$Node: int hashCode()>";
    "<java.util.AbstractList: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.AbstractList: int hashCode()>";
    "<java.lang.reflect.Parameter: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.reflect.Parameter: int hashCode()>";
    "<java.util.jar.Attributes$Name: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.jar.Attributes$Name: int hashCode()>";
    "<java.lang.String: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.String: int hashCode()>";
    "<java.util.Hashtable: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Hashtable: int hashCode()>";
    "<java.time.LocalTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.LocalTime: int hashCode()>";
    "<java.time.OffsetTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.OffsetTime: int hashCode()>";
    "<sun.util.locale.LocaleExtensions: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<sun.util.locale.LocaleExtensions: int hashCode()>";
    "<java.text.ParsePosition: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.text.ParsePosition: int hashCode()>";
    "<java.lang.Character$Subset: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Character$Subset: int hashCode()>";
    "<java.security.CodeSigner: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.CodeSigner: int hashCode()>";
    "<sun.util.locale.BaseLocale: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<sun.util.locale.BaseLocale: int hashCode()>";
    "<java.lang.invoke.MethodType: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.invoke.MethodType: int hashCode()>";
    "<java.security.Timestamp: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.Timestamp: int hashCode()>";
    "<java.util.jar.Manifest: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.jar.Manifest: int hashCode()>";
    "<java.time.ZonedDateTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.ZonedDateTime: int hashCode()>";
    "<java.time.temporal.ValueRange: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.temporal.ValueRange: int hashCode()>";
    "<java.lang.Long: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Long: int hashCode()>";
    "<java.time.Duration: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.Duration: int hashCode()>";
    "<java.math.BigInteger: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.math.BigInteger: int hashCode()>";
    "<java.time.ZoneOffset: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.ZoneOffset: int hashCode()>";
    "<java.math.MathContext: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.math.MathContext: int hashCode()>";
    "<java.net.NetworkInterface: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.NetworkInterface: int hashCode()>";
    "<java.util.WeakHashMap$Entry: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.WeakHashMap$Entry: int hashCode()>";
    "<java.util.Hashtable$Entry: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Hashtable$Entry: int hashCode()>";
    "<java.lang.StackTraceElement: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StackTraceElement: int hashCode()>";
    "<java.lang.reflect.Field: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.reflect.Field: int hashCode()>";
    "<java.net.Inet4Address: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.Inet4Address: int hashCode()>";
    "<java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.concurrent.ConcurrentHashMap$EntrySetView: int hashCode()>";
    "<java.util.Locale$LocaleKey: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Locale$LocaleKey: int hashCode()>";
    "<java.util.Date: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Date: int hashCode()>";
    "<java.time.chrono.AbstractChronology: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.chrono.AbstractChronology: int hashCode()>";
    "<java.util.Locale: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Locale: int hashCode()>";
    "<java.lang.Short: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Short: int hashCode()>";
    "<java.util.zip.ZipEntry: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.zip.ZipEntry: int hashCode()>";
    "<java.util.concurrent.ConcurrentHashMap: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.concurrent.ConcurrentHashMap: int hashCode()>";
    "<jdk.internal.org.objectweb.asm.Type: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<jdk.internal.org.objectweb.asm.Type: int hashCode()>";
    "<java.time.Instant: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.Instant: int hashCode()>";
    "<java.util.OptionalInt: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.OptionalInt: int hashCode()>";
    "<java.util.AbstractSet: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.AbstractSet: int hashCode()>";
    "<javax.security.auth.Subject: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<javax.security.auth.Subject: int hashCode()>";
    "<jdk.internal.org.objectweb.asm.Handle: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<jdk.internal.org.objectweb.asm.Handle: int hashCode()>";
    "<java.net.InetAddress: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.InetAddress: int hashCode()>";
    "<java.text.FieldPosition: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.text.FieldPosition: int hashCode()>";
    "<java.net.InterfaceAddress: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.InterfaceAddress: int hashCode()>";
    "<java.lang.Double: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Double: int hashCode()>";
    "<java.io.File: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.io.File: int hashCode()>";
    "<java.time.format.DecimalStyle: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.format.DecimalStyle: int hashCode()>";
    "<java.security.CodeSource: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.CodeSource: int hashCode()>";
    "<java.net.URL: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.URL: int hashCode()>";
    "<sun.util.locale.BaseLocale$Key: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<sun.util.locale.BaseLocale$Key: int hashCode()>";
    "<java.net.URI: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.net.URI: int hashCode()>";
    "<java.lang.Byte: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Byte: int hashCode()>";
    "<java.util.IdentityHashMap: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.IdentityHashMap: int hashCode()>";
    "<java.time.OffsetDateTime: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.time.OffsetDateTime: int hashCode()>";
    "<java.util.Optional: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.util.Optional: int hashCode()>";
    "<java.security.Provider$ServiceKey: int hashCode()>"
    "<java.lang.Object: java.lang.String toString()>"->"<java.security.Provider$ServiceKey: int hashCode()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Object: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Integer: int hashCode()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: int hashCode(int)>"
    "<java.lang.Integer: int hashCode()>"->"<java.lang.Integer: int hashCode(int)>";
    "<java.lang.Integer: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: int hashCode(boolean)>"
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Boolean: int hashCode(boolean)>";
    "<java.lang.Boolean: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: int hashCode()>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: int hashCode(float)>"
    "<java.lang.Float: int hashCode()>"->"<java.lang.Float: int hashCode(float)>";
    "<java.lang.Float: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"
    "<java.lang.Character: int hashCode()>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: int hashCode(char)>"
    "<java.lang.Character: int hashCode()>"->"<java.lang.Character: int hashCode(char)>";
    "<java.lang.Character: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: int hashCode()>"->"<java.lang.Long: void <clinit>()>";
    "<java.lang.Long: int hashCode(long)>"
    "<java.lang.Long: int hashCode()>"->"<java.lang.Long: int hashCode(long)>";
    "<java.lang.Long: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"
    "<java.lang.Short: int hashCode()>"->"<java.lang.Short: void <clinit>()>";
    "<java.lang.Short: int hashCode(short)>"
    "<java.lang.Short: int hashCode()>"->"<java.lang.Short: int hashCode(short)>";
    "<java.lang.Short: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: int hashCode()>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: int hashCode(double)>"
    "<java.lang.Double: int hashCode()>"->"<java.lang.Double: int hashCode(double)>";
    "<java.lang.Double: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"
    "<java.lang.Byte: int hashCode()>"->"<java.lang.Byte: void <clinit>()>";
    "<java.lang.Byte: int hashCode(byte)>"
    "<java.lang.Byte: int hashCode()>"->"<java.lang.Byte: int hashCode(byte)>";
    "<java.lang.Byte: int hashCode()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Float: int hashCode(float)>"->"<java.lang.Float: void <clinit>()>";
    "<java.lang.Float: int hashCode(float)>"->"<java.lang.Float: int floatToIntBits(float)>";
    "<java.lang.Float: int hashCode(float)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Short: void <clinit>()>";
    "<java.lang.Short: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Double: int hashCode(double)>"->"<java.lang.Double: void <clinit>()>";
    "<java.lang.Double: int hashCode(double)>"->"<java.lang.Double: long doubleToLongBits(double)>";
    "<java.lang.Double: int hashCode(double)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Byte: void <clinit>()>";
    "<java.lang.Byte: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>"
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>";
    "<java.lang.Thread: java.lang.String getName()>"
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.Thread: java.lang.String getName()>";
    "<java.lang.Thread: int getPriority()>"
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.Thread: int getPriority()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.Thread: java.lang.String getName()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.Thread: int getPriority()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.ThreadGroup: java.lang.String getName()>"
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.ThreadGroup: java.lang.String getName()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Thread: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: void <init>(char[],boolean)>"
    "<java.lang.StringBuffer: java.lang.String toString()>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: boolean isInterface()>"
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: boolean isInterface()>";
    "<java.lang.Class: boolean isPrimitive()>"
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: boolean isPrimitive()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<junit.framework.ComparisonFailure: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<junit.framework.ComparisonFailure: java.lang.String getMessage()>";
    "<org.junit.internal.ArrayComparisonFailure: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<org.junit.internal.ArrayComparisonFailure: java.lang.String getMessage()>";
    "<org.junit.ComparisonFailure: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<org.junit.ComparisonFailure: java.lang.String getMessage()>";
    "<java.net.URISyntaxException: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.net.URISyntaxException: java.lang.String getMessage()>";
    "<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>";
    "<java.io.InvalidClassException: java.lang.String getMessage()>"
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.io.InvalidClassException: java.lang.String getMessage()>";
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.TestFailure: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.StringBuffer: void <clinit>()>"
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.Boolean: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<java.lang.String: void <init>(char[])>"
    "<java.lang.String: java.lang.String valueOf(char[])>"->"<java.lang.String: void <init>(char[])>";
    "<java.lang.String: void <init>(char[])>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: char[] copyOf(char[],int)>"
    "<java.lang.String: void <init>(char[])>"->"<java.util.Arrays: char[] copyOf(char[],int)>";
    "<java.lang.String: void <init>(char[])>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<java.lang.Integer: java.lang.String toUnsignedString0(int,int)>"->"<java.lang.String: void <init>(char[],boolean)>";
    "<java.lang.Throwable: void <init>()>"
    "<java.lang.Error: void <init>()>"->"<java.lang.Throwable: void <init>()>";
    "<java.lang.Throwable: void <clinit>()>"
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Collections: void <clinit>()>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Error: void <init>(java.lang.String)>"
    "<java.lang.AssertionError: void <init>(java.lang.String)>"->"<java.lang.Error: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>"
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<sootTest.sootexample: void a()>"
    "<sootTest.sootexample: void b()>"->"<sootTest.sootexample: void a()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<junit.framework.ComparisonFailure: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<org.junit.internal.ArrayComparisonFailure: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<org.junit.ComparisonFailure: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<java.net.URISyntaxException: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getLocalizedMessage()>"->"<java.io.InvalidClassException: java.lang.String getMessage()>";
    "<java.lang.Boolean: void <init>(boolean)>"
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <init>(boolean)>";
    "<java.lang.Boolean: void <clinit>()>"->"<java.lang.Boolean: void <init>(boolean)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"
    "<java.lang.Character: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>"
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: void <clinit>()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Object: void <clinit>()>";
    "<org.junit.internal.ArrayComparisonFailure: java.lang.String getMessage()>"->"<junit.framework.ComparisonFailure: java.lang.String getMessage()>";
    "<java.lang.String: void <init>(char[],boolean)>"->"<java.lang.Object: void <init>()>";
    "<junit.framework.ComparisonCompactor: void <init>(int,java.lang.String,java.lang.String)>"
    "<junit.framework.ComparisonFailure: java.lang.String getMessage()>"->"<junit.framework.ComparisonCompactor: void <init>(int,java.lang.String,java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"
    "<junit.framework.ComparisonFailure: java.lang.String getMessage()>"->"<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>";
    "<junit.framework.ComparisonFailure: java.lang.String getMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>";
    "<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>"
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>";
    "<java.lang.StringBuffer: void <clinit>()>"->"<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>";
    "<java.lang.String: void <init>(char[])>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"
    "<java.lang.Throwable: void <init>()>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <clinit>()>"->"<java.lang.Class: boolean desiredAssertionStatus()>";
    "<java.util.ArrayList: void <init>(int)>"
    "<java.lang.Throwable: void <clinit>()>"->"<java.util.ArrayList: void <init>(int)>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"
    "<java.lang.Error: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <init>(java.lang.String)>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: void <clinit>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<sootTest.sootexample: void a()>"->"<sootTest.sootexample: void c()>";
    "<java.lang.Boolean: void <init>(boolean)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<java.lang.Class: boolean desiredAssertionStatus()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.System: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>";
    "<sun.reflect.Reflection: java.lang.Class getCallerClass()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<sun.reflect.Reflection: java.lang.Class getCallerClass()>";
    "<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.ClassLoader: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.ClassLoader: void <clinit>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<sun.reflect.Reflection: void <clinit>()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<sun.reflect.Reflection: void <clinit>()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Object: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: void <init>(int,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<junit.framework.ComparisonCompactor: boolean areStringsEqual()>"
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.ComparisonCompactor: boolean areStringsEqual()>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.ComparisonCompactor: void findCommonPrefix()>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.ComparisonCompactor: void findCommonSuffix()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compact(java.lang.String)>"->"<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: int min(int,int)>"
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.Math: int min(int,int)>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: int length()>"
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.String: int length()>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.StringBuffer: void <init>()>"
    "<java.lang.AbstractStringBuilder: void <init>(int)>"
    "<java.lang.StringBuffer: void <init>()>"->"<java.lang.AbstractStringBuilder: void <init>(int)>";
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>"
    "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Throwable: void <init>(java.lang.String)>"->"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>"
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader0()>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "<junit.framework.ComparisonCompactor: boolean areStringsEqual()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.String: char charAt(int)>";
    "<junit.framework.ComparisonCompactor: void findCommonPrefix()>"->"<java.lang.String: char charAt(int)>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"->"<java.lang.String: char charAt(int)>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"->"<java.lang.String: char charAt(int)>";
    "<junit.framework.ComparisonCompactor: void findCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String compactString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.Math: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.Math: int max(int,int)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.Object: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.Math: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.Math: int min(int,int)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int)>"
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
    "<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>"
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"->"<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>"
    "<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>"
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>"->"<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>";
    "<java.lang.StringIndexOutOfBoundsException: void <init>(int)>"
    "<java.lang.String: char charAt(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"
    "<java.lang.String: java.lang.String substring(int,int)>"->"<java.lang.String: void <init>(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.util.Arrays: char[] copyOfRange(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.Object: void <clinit>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonPrefix()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.StringBuilder: void <init>()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.String: int length()>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<junit.framework.ComparisonCompactor: java.lang.String computeCommonSuffix()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: java.lang.String substring(int)>"->"<java.lang.String: void <init>(char[],int,int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
    "<java.lang.String: void <init>(char[],int,int)>"->"<java.lang.StringIndexOutOfBoundsException: void <init>(int)>";
}
